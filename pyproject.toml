[tool.poetry]
name = "Tracker of visited urls"
version = "0.1.0"
description = "Tracker of visited urls"
authors = ["n.s.kutepov <contras322@mail.ru>"]

[[tool.poetry.source]]
name = "pypi"
priority = "primary"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104"
uvicorn = "^0.24"
python-dotenv = "^1.0"
loguru = "^0.7"
sqlalchemy = "^2.0"
alembic = "^1.12"
asyncpg = "^0.29"
toml = "^0.10"
click = "^8.1"
dependency-injector = "4.41.0"
uvloop = "^0.19"
pydantic-settings = "^2.1"
freezegun = "^1.4.0"
httpx = "^0.27.0"

[tool.poetry.group.dev.dependencies]
pylint = "^3.0"
pytest = "^7.4"
mypy = "^1.7"
pycodestyle = "^2.11"
black = "^23.11"
isort = "^5.12"
pytest-asyncio = "^0.21"
pytest-cov = "^4.1"
pydocstyle = "^6.3"
requests = "^2.31"
greenlet = "^3.0"
types-toml = "^0.10"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"
filterwarnings = ["ignore::DeprecationWarning"]

[tool.black]
line-length = 100
target-version = ["py39"]
skip-magic-trailing-comma = true

[tool.isort]
profile = "black"
line_length = 100
src_paths = [
    "app",
    "linters",
    "cli",
    "migrations",
    "tests",
    "utils",
]
skip = [".venv"]

[tool.pydocstyle]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D202", # No blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "D302", # Use u”“” for Unicode docstrings
    "D407", # Missing dashed underline after section
    "D412", # No blank lines allowed between a section header and its content
]
# All dirs except versions
match-dir="^(?!versions).*"

[tool.mypy]
ignore_missing_imports = true
warn_unused_ignores = true
allow_redefinition = true
strict_equality = true
disallow_incomplete_defs = true
no_implicit_optional = true
plugins = ["sqlalchemy.ext.mypy.plugin"]
exclude = "migrations/versions"

[tool.pylint.master]
ignore = ["versions"]
jobs = 0  # Autodetecting CPU count
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.confusing_elif",
    "pylint.extensions.for_any_all",
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.mccabe",
    "pylint.extensions.dict_init_mutate",
    "pylint.extensions.docstyle",
    "pylint.extensions.dunder",
    "pylint.extensions.check_elif",
    "pylint.extensions.empty_comment",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.private_import",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.docparams",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
]
suggestion-mode = true
extension-pkg-allow-list = ["pydantic", "dependency_injector"]

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "logging-fstring-interpolation",
    "logging-format-interpolation",
    "too-few-public-methods",
    "global-statement",
    "unnecessary-pass",
    "wildcard-import",
    "unused-wildcard-import",
    "no-member",
    "useless-param-doc",
    "useless-type-doc",
    "bad-mcs-classmethod-argument",
    "redefined-variable-type"
]

[tool.pylint.base]
good-names = ["i", "j", "k", "ex", "Run", "_", "e", "ns", "id", "T", "F"]
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata", "res", "result", "record"]
const-rgx = "(([A-z_][A-z0-9_]*)|(__.*__))$"

[tool.pylint.typecheck]
ignored-modules = ["alembic.context"]
ignored-classes = [
    "SQLObject",
    "optparse.Values",
    "thread._local",
    "_thread._local",
    "scoped_session"
]
ignored-parents = []
generated-members = ["REQUEST", "acl_users", "aq_parent"]
min-public-methods = 2

[tool.pylint.similarities]
ignore-imports = true

[tool.pylint.format]
max-module-lines = 2000

[tool.pylint.design]
min-public-methods = 2
exclude-too-few-public-methods = ""

[tool.coverage.run]
branch = true
omit = [
    "*venv\\*",
    "*/.venv/*",
    "*/.pycharm_helpers/*",
    "\\*helpers\\pycharm\\*",
    "/usr/share/python3/*",
    "*/app/settings/*",
    "*/utils/*",
    "*/app/db/*",
    "*/app/models/base.py"
]

[tool.coverage.report]
skip_covered = true
show_missing = true
fail_under = 0
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
]
partial_branches = [
    "pragma: no branch",
    "assert",
]
sort = "Cover"
